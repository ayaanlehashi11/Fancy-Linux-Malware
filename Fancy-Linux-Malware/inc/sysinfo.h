#ifndef _SYSINFO_H
#define _SYSINFO_H
#endif

#include <iostream>
#include <thread>
#include <fstream>
#include <boost/filesystem.hpp>
#include <sys/syslog.h>
#include <sys/statfs.h>
#include <sys/sysinfo.h>
using boost::filesystem::path;
using boost::filesystem::permissions;

#ifdef _SYS_SYSLOG_H

#endif

// this struct containing the memory state and statistics info 
struct memo_struct
{
    std::string memo_info_path;
    struct sysinfo* system_info;
    bool has_swap_space;
    bool memory_overloaded;
    unsigned long mem_size = system_info->totalram;
    unsigned long free_mem_size = system_info->freeram;
    unsigned long buffer_mem_siz = system_info->bufferram;

};
/* this function extract the information
 embedded within the /proc/stat and /proc/meminfo files*/
extern void extract_info();

struct read_log
{
    struct sys_log = syslog();
    std::string __temp_rise_log;
    std::string warning_log;
    std::string info_log;
};
// disk storage and partition related info
struct disk_struct{
public:
    struct statfs *fs;
    uintmax_t size = (uintmax_t)fs->f_bavail;
    uintmax_t free = (uintmax_t)fs->f_bfree;
public:
    constexpr void file_stat(path* path);
    friend bool check_permission(path* path);
};

struct cpu_struct
{
    std::string cpu_info_path[100];
    long double temperature;
    long double fan_speed;
};

class memory_leaker final{
public:
   friend void read_log (struct read_log*);
   volatile unsigned long cpu_stat(struct cpu_stat*);
   const struct memo_struct* memory_info(const struct memo_struct*);
   friend volatile signed long leaker_init();
};
