#ifndef _SYSINFO_H
#define _SYSINFO_H
#endif

#include <iostream>
#include <fstream>
#include <filesystem>

#ifdef GLIBCXX11

#endif

// this struct containing the memory state and statistics info 
struct memo_struct
{
    size_t total_memory;
    size_t usable_memory;
    size_t available_memory;
    size_t cache , buffer_memory;
    size_t total_swap , used_swap;

};
/* this function extract the information
 embedded within the /proc/stat and /proc/meminfo files*/
extern void extract_info();

class Virus
{
public:
    Virus();
    static uint time_steps(uint8_t) ;
    friend const struct system_info* sys_info(struct system_info* sys_info);
    friend inline void sys_details(std::vector<string>paths);
    constexpr inline void init_malware();
public:
    bool file_exists = 0;
    signed long int file_size;
};

struct read_log
{
    struct sys_log = syslog();
    std::string __temp_rise_log;
    std::string warning_log;
    std::string info_log;
};

struct system_struct
{
public:
    std::filesystem::path p;
    std::fstream strm;
    string buffer;
    size_t total_memory , used_memory , free_memory;
    size_t cache , buffer_memory;
    size_t total_swap , free_swap , used_swap;
    size_t cpu_temperatures[] , cpu_usages[];
};

signed int cpu_stat(cpu_struct);
// cpu stat and other essential info
//temperature: is the temperature of the cpu
//fan speed: the speed of the air fan in units of rmp (radian per minutet)
struct cpu_struct
{
    long double* temperatures;
    long double* cpu_usage
};
// this class gets some info from the cpu and other hardware related logs
// before proceeding the whole memory leaking procedure
class memory_leaker final{
public:
   friend void memory_log (struct read_log*);
   const struct memo_struct* memory_info(const struct memo_struct*);
   volatile signed long leaker_init();
};
